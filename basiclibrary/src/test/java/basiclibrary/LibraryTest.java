/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basiclibrary;

import org.junit.Assert;
import org.junit.Test;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import static org.junit.Assert.*;

public class LibraryTest {
    @Test public void testSomeLibraryMethod() {
        Library classUnderTest = new Library();
        assertTrue("someLibraryMethod should return 'true'", classUnderTest.someLibraryMethod());
    }

    //Test to see if the length of the array returned is expected
    @Test public void testRollLength () {
       int[] actual = Library.roll(4);
       int[] expected = new int[4];
       System.out.println(Arrays.toString(actual));
       assertEquals(expected.length, actual.length);
    }

    //Test for an array not containing duplicates
    @Test public void testContainsDuplicatesFalse () {
        int[] input1 = new int[] {1, 2, 3, 4, 5};
        boolean actual = Library.containsDuplicates(input1);

        assertTrue(actual == false);
    }

    //Test for an array containing duplicates
    @Test public void testContainsDuplicatesTrue () {
        int[] input2 = new int[] {1, 2, 2, 1, 6};
        boolean actual = Library.containsDuplicates(input2);

        assertTrue(actual == true);
    }

    //Testing for a whole number average
    @Test public void testCalculateSingleArrayAverage1 () {
        int[] input1 = new int[] {1, 1, 1, 1};

        double actual1 = Library.calculateSingleArrayAverages(input1);

        assertTrue( 1 == actual1);
    }

    //Testing for a decimal number average
    @Test public void testCalculateSingleArrayAverage2 () {
        int[] input2 = new int[] {3, 2, 2, 2};

        double actual2 = Library.calculateSingleArrayAverages(input2);

        assertTrue(2.25 == actual2);
    }

    //Test to see if array with lowest value returned
    @Test public void testFindArrayWithLowestAverage () {
        int[][] input1 = {
                {6, 6, 5, 6, 7, 5, 6}, // 5.85714286
                {7, 6, 6, 7, 7, 6, 5}, // 6.28571429
                {4, 5, 6, 5, 5, 5, 6}, // 5.14285714
                {3, 6, 5, 5, 5, 6, 5} // 5
        };

        int[] expected = new int [] {3, 6, 5, 5, 5, 6, 5};
        int[] actual = Library.findArrayWithLowestAverage(input1);

        assertArrayEquals(expected, actual);
    }

    //Test to see if high/low and unseen temps for the month are returned in a string
    @Test public void testAnalyzeWeatherData () {
        int[][] input = {
                {66, 64, 58, 65, 71, 57, 60},
                {57, 65, 65, 70, 72, 65, 51},
                {55, 54, 60, 53, 59, 57, 61},
                {65, 56, 55, 52, 55, 62, 57}
        };

        String expected = "High: 72" + "\n" + "Low: 51" + "\n" + "Never saw temperature: 63" + "\n" + "Never saw temperature: 67" + "\n" + "Never saw temperature: 68" + "\n" + "Never saw temperature: 69" + "\n";
        String actual = Library.analyzeWeatherData((input));

        assertEquals(expected, actual);
    }

    //Test to see if tally function returns a string with the person who received the most votes
    @Test public void testTally () {
        List<String> input = new ArrayList<>();
        input.add("Bush");
        input.add("Bush");
        input.add("Bush");
        input.add("Shrub");
        input.add("Hedge");
        input.add("Shrub");
        input.add("Bush");
        input.add("Hedge");
        input.add("Bush");

        String expected = "Bush got the most votes!";
        String actual = Library.tally(input);

        assertEquals(expected, actual);
    }


}
